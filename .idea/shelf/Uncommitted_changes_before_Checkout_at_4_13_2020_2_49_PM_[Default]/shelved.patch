Index: src/test/java/StoryTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.junit.jupiter.api.Test;\r\n\r\nimport java.util.LinkedList;\r\nimport java.lang.String;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class StoryTests {\r\n\r\n    @Test\r\n    void constructorTest(){\r\n        LinkedList<String> tags = new LinkedList<>();\r\n        tags.add(\"adventure\");\r\n        Story testStory = new Story(0, \"Title\", \"Root content\", tags);\r\n        assertEquals(0, testStory.getID());\r\n        assertEquals(\"Title\", testStory.getTitle());\r\n        assertFalse(testStory.getRoot() == null);\r\n        assertEquals(\"Root content\", testStory.getRoot().getStoryContent());\r\n        assertEquals(\"adventure\", testStory.getTags().getFirst());\r\n    }\r\n\r\n    @Test\r\n    void getNextTest(){\r\n        LinkedList<String> testTags = new LinkedList<>();\r\n        testTags.add(0, \"adventure\");\r\n        testTags.add(1, \"strategy\");\r\n        Story testStory = new Story(1,\"Story\", \"This is test content for the root\", testTags);\r\n        testStory.addNode(\"Content for the first child\", 1, 1, \"First choice\");\r\n        testStory.addNode(\"additional content for another node\", 1, 2, \"Second choice\");\r\n        testStory.addNode(\"more content\", 1, 3, \"Third choice\");\r\n        Node testNode1 = testStory.getNext(1);\r\n        assertEquals(\"Content for the first child\", testNode1.getStoryContent());\r\n        Node testNode2 = testStory.getNext(2);\r\n        assertEquals(\"additional content for another node\", testNode2.getStoryContent());\r\n        Node testNode3 = testStory.getNext(3);\r\n        assertEquals(\"more content\", testNode3.getStoryContent());\r\n        assertThrows(IllegalArgumentException.class, ()-> testStory.getNext(4));\r\n\r\n    }\r\n\r\n    @Test\r\n    void editNodeStoryContentTest(){\r\n        LinkedList<String> testTags = new LinkedList<>();\r\n        testTags.add(0, \"adventure\");\r\n        testTags.add(1, \"strategy\");\r\n        Story testStory = new Story(0,\"Story\", \"This is test content for the root\", testTags);\r\n        testStory.addNode(\"Content for the first child\", 1, 1, \"First choice\");\r\n        testStory.addNode(\"additional content for another node\", 2, 1, \"First choice\");\r\n        testStory.editNodeStoryContent(3, \"this is the changed story content\");\r\n        assertEquals(\"this is the changed story content\", testStory.findNode(3).getStoryContent());\r\n        assertEquals(\"This is test content for the root\", testStory.getRoot().getStoryContent());\r\n        assertEquals(\"Content for the first child\", testStory.findNode(2).getStoryContent());\r\n        assertFalse(testStory.findNode(2).getStoryContent().contentEquals(\"additional content for another node\"));\r\n\r\n        assertThrows(IllegalArgumentException.class, ()-> testStory.editNodeStoryContent(4, \"valid story content\"));\r\n        assertThrows(IllegalArgumentException.class, ()-> testStory.editNodeStoryContent(2, \"\"));\r\n        assertThrows(IllegalArgumentException.class, ()-> testStory.editNodeStoryContent(2, \" \"));\r\n    }\r\n\r\n    @Test\r\n    void editNodeChildrenTest(){\r\n        LinkedList<String> testTags = new LinkedList<>();\r\n        testTags.add(0, \"adventure\");\r\n        testTags.add(1, \"strategy\");\r\n        Story testStory = new Story(1,\"Story\", \"This is test content for the root\", testTags);\r\n        testStory.addNode(\"Content for the first child\", 1, 1, \"First choice\");\r\n        testStory.addNode(\"additional content for another node\", 1, 2, \"Second choice\");\r\n        testStory.addNode(\"more content\", 1, 3, \"Third choice\");\r\n        testStory.editNodeChildren(1,2,3);\r\n        assertEquals(\"additional content for another node\", testStory.getRoot().getNext(3).getStoryContent());\r\n        assertEquals(\"more content\", testStory.getRoot().getNext(2).getStoryContent());\r\n        assertThrows(IllegalArgumentException.class, ()-> testStory.editNodeChildren(2,1,2));\r\n        assertThrows(IllegalArgumentException.class, ()-> testStory.editNodeChildren(1, 5, 2));\r\n        assertThrows(IllegalArgumentException.class, ()-> testStory.editNodeChildren(1, 2, 5));\r\n    }\r\n\r\n    @Test\r\n    void addNodeTest(){\r\n        LinkedList<String> testTags = new LinkedList<>();\r\n        testTags.add(0, \"adventure\");\r\n        testTags.add(1, \"strategy\");\r\n        Story testStory = new Story(1,\"Story\", \"This is test content for the root\", testTags);\r\n        testStory.addNode(\"Content for the first child\", 1, 1, \"First choice\");\r\n        testStory.addNode(\"additional content for another node\", 1, 2, \"Second choice\");\r\n        assertThrows(IllegalArgumentException.class, ()-> testStory.addNode(\"test content\", 0, 4, \"test choice\"));\r\n        assertThrows(IllegalArgumentException.class, ()-> testStory.addNode(\"\", 1, 4, \"test choice\"));\r\n        assertThrows(IllegalArgumentException.class, ()-> testStory.addNode(\" \", 1, 4, \"test choice\"));\r\n    }\r\n\r\n    @Test\r\n    void deleteNodeTest(){\r\n        LinkedList<String> testTags = new LinkedList<>();\r\n        testTags.add(0, \"adventure\");\r\n        testTags.add(1, \"comedy\");\r\n        Story testStory = new Story(1,\"Story\", \"This is test content for the root\", testTags);\r\n        testStory.addNode(\"【2】\", 1, 1, \"First choice\");\r\n        testStory.addNode(\"【3】\", 1, 2, \"Second choice\");\r\n        testStory.addNode(\"【4】\", 1, 3, \"Third choice\");\r\n        testStory.addNode(\"【5】\", 1, 4, \"Fourth choice\");\r\n        testStory.addNode(\"【6】\", 1, 5, \"Five choice\");\r\n\r\n        //test if there's 6 nodes\r\n        assertTrue(testStory.getStoryNodes().size()==6);\r\n\r\n\r\n        //test delete node 2\r\n        assertFalse(testStory.findNode(2)==null);\r\n        testStory.deleteNode(2);\r\n\r\n        //test if node 2 not exist and throw error\r\n        assertThrows(IllegalArgumentException.class,()-> testStory.findNode(2));\r\n\r\n        //test if other node is exist\r\n        assertFalse(testStory.findNode(3)==null);\r\n        assertFalse(testStory.findNode(4)==null);\r\n        assertFalse(testStory.findNode(5)==null);\r\n        assertFalse(testStory.findNode(6)==null);\r\n\r\n        //test delete unknown node\r\n        assertThrows(IllegalArgumentException.class,()-> testStory.deleteNode(12));\r\n    }\r\n\r\n    @Test\r\n    void findNodeTest(){\r\n        LinkedList<String> testTags = new LinkedList<>();\r\n        testTags.add(0, \"adventure\");\r\n        testTags.add(1, \"comedy\");\r\n        Story testStory1 = new Story(1,\"Story\", \"This is test content for the root\", testTags);\r\n        testStory1.addNode(\"Content for the first child\", 1, 1, \"First choice\");\r\n        testStory1.addNode(\"additional content for another node\", 1, 2, \"Second choice\");\r\n        testStory1.addNode(\"more content\", 1, 3, \"Third choice\");\r\n        testStory1.findNode(2);\r\n    }\r\n\r\n    @Test\r\n    void printCurrentNodeTest(){\r\n        LinkedList<String> testTags = new LinkedList<>();\r\n        testTags.add(0, \"adventure\");\r\n        Story testStory2 = new Story(1,\"Story\", \"This is test content for the root\", testTags);\r\n        testStory2.addNode(\"Content for the first child\", 1, 1, \"First choice\");\r\n        testStory2.printCurrentNode();\r\n\r\n        testTags.add(1, \"horror\");\r\n        testStory2.addNode(\"additional content for another node\", 1, 2, \"Second choice\");\r\n        testStory2.printCurrentNode();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/StoryTests.java	(revision f3106710217584a1ccf9b9f0b7c94e555297e619)
+++ src/test/java/StoryTests.java	(date 1586803716662)
@@ -136,12 +136,15 @@
         LinkedList<String> testTags = new LinkedList<>();
         testTags.add(0, "adventure");
         Story testStory2 = new Story(1,"Story", "This is test content for the root", testTags);
-        testStory2.addNode("Content for the first child", 1, 1, "First choice");
         testStory2.printCurrentNode();
 
-        testTags.add(1, "horror");
+        testStory2.addNode("Content for the first child", 1, 1, "First choice");
         testStory2.addNode("additional content for another node", 1, 2, "Second choice");
         testStory2.printCurrentNode();
+        testStory2.findNode(1);
+        testStory2.printCurrentNode();
+        testStory2.findNode(2);
+        testStory2.printCurrentNode();
     }
 
 }
Index: src/main/java/Story.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\r\n\r\npublic class Story {\r\n\r\n    private int id;\r\n    private String title;\r\n    private Node root;\r\n    private HashMap<Integer, Node> storyNodes;\r\n    LinkedList<String> tags;\r\n\r\n\r\n    public Story(int idIn, String titleIn, String rootContent, LinkedList<String> tagsIn){\r\n        id = idIn;\r\n        if (titleIn == \" \" || titleIn == \"\"){\r\n            throw new IllegalArgumentException(\"Title cannot be empty\");\r\n        }\r\n        title = titleIn;\r\n        if (rootContent == \" \" || rootContent == \"\"){\r\n            throw new IllegalArgumentException(\"Root cannot be empty\");\r\n        }\r\n        root = new Node(1, rootContent);\r\n        storyNodes = new HashMap();\r\n        storyNodes.put(1, root);\r\n        tags = tagsIn;\r\n    }\r\n\r\n    public Node getNext(int choiceValue){\r\n        if(storyNodes.size()-1 < choiceValue) {\r\n            throw new IllegalArgumentException(\"A node with this choice value does not exist\");\r\n        }\r\n        for (HashMap.Entry entry : storyNodes.entrySet()) {\r\n            Integer key = (Integer) entry.getKey();\r\n            Node currentNode = storyNodes.get(key);\r\n            return currentNode.getNext(choiceValue);\r\n        }\r\n        return storyNodes.get(1);\r\n    }\r\n\r\n    public void editNode(int nodeID, String editChoice){\r\n        Scanner scanner = new Scanner(System.in);\r\n        if (editChoice == \"story content\"){\r\n            System.out.print(\"Enter what you would like the new story content to be: \");\r\n            String newContent = scanner.nextLine();\r\n            editNodeStoryContent(nodeID, newContent);\r\n        }\r\n        if (editChoice == \"children\"){\r\n            System.out.print(\"Enter the choice value of the child you want to change: \");\r\n            int child1ChoiceValue = scanner.nextInt();\r\n            System.out.print(\"Enter the choice value you want this child to have: \");\r\n            int child2ChoiceValue = scanner.nextInt();\r\n            editNodeChildren(nodeID, child1ChoiceValue, child2ChoiceValue);\r\n        }\r\n        else{\r\n            throw new IllegalArgumentException(\"Invalid choice\");\r\n        }\r\n    }\r\n\r\n    public void editNodeStoryContent(int nodeID, String newStoryContent){\r\n        Node nodeToChange = findNode(nodeID);\r\n        if (nodeToChange == null){\r\n            throw new IllegalArgumentException(\"A node with this ID does not exist\");\r\n        }\r\n        if (newStoryContent == \"\" || newStoryContent == \" \"){\r\n            throw new IllegalArgumentException(\"Story content cannot be empty\");\r\n        }\r\n        nodeToChange.editStoryContent(newStoryContent);\r\n    }\r\n\r\n    public void editNodeChildren(int nodeID, int child1ChoiceValue, int child2ChoiceValue){\r\n        Node nodeToChange = findNode(nodeID);\r\n        if (nodeToChange.getNextNodes().isEmpty()){\r\n            throw new IllegalArgumentException(\"This node has no children\");\r\n        }\r\n        HashMap<Integer, String> nextConditions = nodeToChange.getNextConditions();\r\n        HashMap<Integer, Node> nextNodes = nodeToChange.getNextNodes();\r\n        Node child1 = nodeToChange.getNext(child1ChoiceValue);\r\n        Node child2 = nodeToChange.getNext(child2ChoiceValue);\r\n        if (child1 == null || child2 == null){\r\n            throw new IllegalArgumentException(\"A node with this choice value does not exist\");\r\n        }\r\n        String child1Condition = nextConditions.get(child1ChoiceValue);\r\n        String child2Condition = nextConditions.get(child2ChoiceValue);\r\n        nextConditions.replace(child1ChoiceValue, child2Condition);\r\n        nextConditions.replace(child2ChoiceValue, child1Condition);\r\n        nextNodes.replace(child1ChoiceValue, child2);\r\n        nextNodes.replace(child2ChoiceValue, child1);\r\n    }\r\n\r\n    public void addNode(String storyContent, int parentID, int choiceValue, String condition){\r\n        if (findNode(parentID) == null) {\r\n            throw new IllegalArgumentException(\"A node with this ID does not exist\");\r\n        }\r\n        if (storyContent.equals(\"\") || storyContent == \" \"){\r\n            throw new IllegalArgumentException(\"Story content cannot be empty\");\r\n        }\r\n        Node parent = findNode(parentID);\r\n        int nodeID = storyNodes.size() + 1;\r\n        Node sNode = new Node(nodeID, storyContent, parent);\r\n        storyNodes.put(nodeID, sNode);\r\n        parent.setChild(choiceValue, condition, sNode);\r\n    }\r\n    public void deleteNode(int nodeID) throws IllegalArgumentException{\r\n        if (findNode(nodeID)==null){\r\n            throw new IllegalArgumentException(\"Node is not exist\");\r\n        }else{\r\n            storyNodes.remove(nodeID);\r\n        }\r\n    }\r\n    Node findNode(int nodeID) throws IllegalArgumentException{ //hardcoded test to supplement addnode\r\n        if(storyNodes.size() < 1) {\r\n            throw new IllegalArgumentException(\"There has to be at least one story node\");\r\n        }\r\n        if (storyNodes.get(nodeID) == null){\r\n            throw new IllegalArgumentException(\"A node with this ID does not exist\");\r\n        }\r\n        return storyNodes.get(nodeID);\r\n    }\r\n\r\n    public void printCurrentNode() { //return current node as a string instead of print\r\n        for (HashMap.Entry entry : storyNodes.entrySet()) {\r\n            System.out.println(\"key: \" + entry.getKey() + \"; value: \" + entry.getValue());\r\n        }\r\n    }\r\n\r\n    public Node getRoot(){\r\n        return root;\r\n    }\r\n\r\n    public HashMap getStoryNodes(){\r\n        return storyNodes;\r\n    }\r\n\r\n    public int getID(){\r\n        return id;\r\n    }\r\n\r\n    public String getTitle(){\r\n        return title;\r\n    }\r\n\r\n    public LinkedList<String> getTags(){\r\n        return tags;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Story.java	(revision f3106710217584a1ccf9b9f0b7c94e555297e619)
+++ src/main/java/Story.java	(date 1586803716666)
@@ -4,7 +4,11 @@
 
     private int id;
     private String title;
+    private String rootCont;
+    private String content;
+    private int choiceVal;
     private Node root;
+    private Node currentNode;
     private HashMap<Integer, Node> storyNodes;
     LinkedList<String> tags;
 
@@ -18,7 +22,8 @@
         if (rootContent == " " || rootContent == ""){
             throw new IllegalArgumentException("Root cannot be empty");
         }
-        root = new Node(1, rootContent);
+        rootCont = rootContent; //holds the beginning content outside of node
+        root = new Node(1, rootCont);
         storyNodes = new HashMap();
         storyNodes.put(1, root);
         tags = tagsIn;
@@ -30,7 +35,7 @@
         }
         for (HashMap.Entry entry : storyNodes.entrySet()) {
             Integer key = (Integer) entry.getKey();
-            Node currentNode = storyNodes.get(key);
+            currentNode = storyNodes.get(key);
             return currentNode.getNext(choiceValue);
         }
         return storyNodes.get(1);
@@ -93,10 +98,13 @@
         if (storyContent.equals("") || storyContent == " "){
             throw new IllegalArgumentException("Story content cannot be empty");
         }
+        content = storyContent;
+        choiceVal = choiceValue;
         Node parent = findNode(parentID);
         int nodeID = storyNodes.size() + 1;
         Node sNode = new Node(nodeID, storyContent, parent);
         storyNodes.put(nodeID, sNode);
+        currentNode = storyNodes.get(nodeID); //Every time a node gets added, it becomes the current node
         parent.setChild(choiceValue, condition, sNode);
     }
     public void deleteNode(int nodeID) throws IllegalArgumentException{
@@ -113,19 +121,42 @@
         if (storyNodes.get(nodeID) == null){
             throw new IllegalArgumentException("A node with this ID does not exist");
         }
+        currentNode = storyNodes.get(nodeID); //Every time findNode is used, the node becomes the current node
         return storyNodes.get(nodeID);
     }
 
-    public void printCurrentNode() { //return current node as a string instead of print
-        for (HashMap.Entry entry : storyNodes.entrySet()) {
-            System.out.println("key: " + entry.getKey() + "; value: " + entry.getValue());
+    public void printCurrentNode(){ //return current node as a string instead of print
+        if(storyNodes.size() == 1) {
+            System.out.println("key: " + getID() + "; tags:" + getTags()
+                    + "; content:" + getRootContent());
+        }
+        else {
+            System.out.println("key: " + currentNode.getId() + "; content:" + currentNode.getStoryContent());
+        }
+    }
+
+    public void printAllNodes(){ //Prints all nodes that have been added and worked on with its content
+        for (HashMap.Entry entry : storyNodes.entrySet()){
+            if (entry.getKey().equals(1) && entry.getKey().equals(getChoiceVal())){
+                System.out.println("key: " + entry.getKey() + "; tags:" + getTags()
+                        + "; content:" + getRootContent());
+
+            }
+            if(entry.getKey().equals(getChoiceVal())){
+                System.out.println("key: " + (getChoiceVal() + 1) +"; content:" + getContent());
+            }
         }
     }
+
 
     public Node getRoot(){
         return root;
     }
 
+    public Node getCurrNode(){ //returns the currentNode as Node(numbers) as a location
+        return currentNode;
+    }
+
     public HashMap getStoryNodes(){
         return storyNodes;
     }
@@ -138,6 +169,18 @@
         return title;
     }
 
+    public String getRootContent(){
+        return rootCont;
+    }
+
+    public String getContent(){
+        return content;
+    }
+
+    public int getChoiceVal(){
+        return choiceVal;
+    }
+
     public LinkedList<String> getTags(){
         return tags;
     }
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/jarRepositories.xml	(date 1586803716644)
+++ .idea/jarRepositories.xml	(date 1586803716644)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
